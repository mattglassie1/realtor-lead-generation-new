# COMPLETE REALTOR LEAD GENERATION WEBSITE FILES
# Copy each section below to create your project files

===============================================
FILE: package.json
===============================================
{
  "name": "realtor-lead-generation",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-context-menu": "^2.2.16",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-hover-card": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-navigation-menu": "^1.2.14",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-toggle-group": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@stripe/stripe-js": "^7.9.0",
    "@types/pg": "^8.15.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.542.0",
    "motion": "^12.23.12",
    "next": "15.5.2",
    "next-themes": "^0.4.6",
    "pg": "^8.16.3",
    "react": "19.1.0",
    "react-day-picker": "^9.9.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "react-resizable-panels": "^3.0.5",
    "recharts": "2.15.4",
    "sonner": "^2.0.7",
    "stripe": "^18.5.0",
    "tailwind-merge": "^3.3.1",
    "vaul": "^1.1.2",
    "zod": "^4.1.5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

===============================================
FILE: .env.example
===============================================
STRIPE_SECRET_KEY=sk_live_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_publishable_key

PGUSER=your_db_user
PGPASSWORD=your_db_password
PGDATABASE=realtor_leads
PGHOST=your_db_host
PGPORT=5432

NEXT_PUBLIC_BASE_URL=https://yourdomain.com

===============================================
FILE: README.md
===============================================
# Realtor Lead Generation Website

A complete lead generation website for real estate professionals with automated subscription billing and lead management.

## ðŸš€ Features

- **Professional Landing Page** - High-converting design optimized for realtor sign-ups
- **3 Subscription Tiers** - $449, $699, and $1,299 monthly packages
- **Stripe Integration** - Secure payment processing with automatic billing
- **Lead Management** - PostgreSQL database to store and track all leads
- **Responsive Design** - Mobile-optimized with modern UI components
- **Success/Cancel Flows** - Complete user experience with proper redirects

## ðŸ’° Subscription Packages

| Package | Price | Leads/Month | Features |
|---------|-------|-------------|----------|
| Starter | $449 | 20 leads | Verified contacts, 15-mile radius, Email support |
| Popular | $699 | 50 leads | All Starter features + Priority support |
| Pro | $1,299 | 100 leads | All features + Dedicated support + Analytics |

## ðŸ›  Tech Stack

- **Frontend**: Next.js 15, React, TypeScript
- **UI Components**: shadcn/ui, Tailwind CSS
- **Payment**: Stripe Checkout & Subscriptions
- **Database**: PostgreSQL
- **Deployment**: Vercel (recommended)

## ðŸ“‹ Quick Setup

### 1. Clone & Install
```bash
git clone https://github.com/mattglassie1/realtor-lead-generation.git
cd realtor-lead-generation
npm install
```

### 2. Environment Variables
Copy `.env.example` to `.env.local` and fill in your Stripe keys and database credentials.

### 3. Run Development Server
```bash
npm run dev
```

## ðŸš€ Deployment to Vercel

1. Push your code to GitHub
2. Connect repository to Vercel
3. Add environment variables in Vercel dashboard
4. Deploy automatically on every push

Your website will be live and ready to convert visitors into paying customers!

===============================================
FILE: next.config.ts
===============================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

===============================================
FILE: tsconfig.json
===============================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

===============================================
FILE: .gitignore
===============================================
# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Next.js
.next/
out/

# Production
build/
dist/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Vercel
.vercel

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Temporary folders
tmp/
temp/

# Archive files
*.tar.gz
*.zip

'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, Users, MapPin, TrendingUp } from 'lucide-react';

const packages = [
  {
    id: '20-leads',
    name: '20 Leads',
    price: '$449',
    description: '20 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Email support']
  },
  {
    id: '50-leads',
    name: '50 Leads',
    price: '$699',
    description: '50 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Priority support'],
    popular: true
  },
  {
    id: '100-leads',
    name: '100 Leads',
    price: '$1,299',
    description: '100 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Dedicated support', 'Lead analytics']
  }
];

export default function Home() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    brokerage: '',
    zipCode: '',
    packageType: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await fetch('/api/create-checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const { url } = await response.json();
      window.location.href = url;
    } catch (error) {
      console.error('Error:', error);
      setIsSubmitting(false);
    }
  };

  const isFormValid = formData.name && formData.email && formData.phone && 
                     formData.brokerage && formData.zipCode && formData.packageType;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">RealEstate Leads Pro</h1>
            <Badge variant="secondary" className="bg-green-100 text-green-800">
              Trusted by 1000+ Realtors
            </Badge>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h2 className="text-5xl font-bold text-gray-900 mb-6">
            Get High-Quality Real Estate Leads
            <span className="text-blue-600"> Delivered Monthly</span>
          </h2>
          <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            Stop chasing leads. Start closing deals. Our verified leads are delivered directly to your inbox, 
            targeted to your specific zip code with a 15-mile radius.
          </p>
          
          <div className="flex justify-center space-x-8 mb-12">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <span className="text-gray-700">Verified Contact Info</span>
            </div>
            <div className="flex items-center space-x-2">
              <MapPin className="h-5 w-5 text-blue-500" />
              <span className="text-gray-700">15-Mile Targeting</span>
            </div>
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5 text-purple-500" />
              <span className="text-gray-700">Monthly Delivery</span>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-12 items-start">
          {/* Pricing Cards */}
          <div className="space-y-6">
            <h3 className="text-3xl font-bold text-gray-900 text-center mb-8">Choose Your Package</h3>
            <div className="space-y-4">
              {packages.map((pkg) => (
                <Card 
                  key={pkg.id} 
                  className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
                    formData.packageType === pkg.id 
                      ? 'ring-2 ring-blue-500 shadow-lg' 
                      : 'hover:shadow-md'
                  } ${pkg.popular ? 'border-blue-500' : ''}`}
                  onClick={() => handleInputChange('packageType', pkg.id)}
                >
                  <CardHeader className="pb-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-xl">{pkg.name}</CardTitle>
                        <CardDescription>{pkg.description}</CardDescription>
                      </div>
                      <div className="text-right">
                        <div className="text-3xl font-bold text-blue-600">{pkg.price}</div>
                        <div className="text-sm text-gray-500">per month</div>
                      </div>
                    </div>
                    {pkg.popular && (
                      <Badge className="w-fit bg-blue-600 hover:bg-blue-700">Most Popular</Badge>
                    )}
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {pkg.features.map((feature, index) => (
                        <li key={index} className="flex items-center space-x-2">
                          <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                          <span className="text-sm text-gray-600">{feature}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Sign Up Form */}
          <div className="lg:sticky lg:top-8">
            <Card className="shadow-xl">
              <CardHeader>
                <CardTitle className="text-2xl text-center">Start Getting Leads Today</CardTitle>
                <CardDescription className="text-center">
                  Fill out your information below to get started with your monthly lead subscription
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name *</Label>
                      <Input
                        id="name"
                        type="text"
                        value={formData.name}
                        onChange={(e) => handleInputChange('name', e.target.value)}
                        placeholder="John Smith"
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input
                        id="phone"
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => handleInputChange('phone', e.target.value)}
                        placeholder="(555) 123-4567"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address *</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      placeholder="john@example.com"
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="brokerage">Brokerage Information *</Label>
                    <Textarea
                      id="brokerage"
                      value={formData.brokerage}
                      onChange={(e) => handleInputChange('brokerage', e.target.value)}
                      placeholder="RE/MAX Premier, License #12345"
                      rows={3}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="zipCode">Target Zip Code *</Label>
                    <Input
                      id="zipCode"
                      type="text"
                      value={formData.zipCode}
                      onChange={(e) => handleInputChange('zipCode', e.target.value)}
                      placeholder="90210"
                      maxLength={5}
                      required
                    />
                    <p className="text-sm text-gray-500">
                      Leads will be targeted within a 15-mile radius of this zip code
                    </p>
                  </div>

                  {!formData.packageType && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <p className="text-sm text-yellow-800">
                        Please select a package above to continue
                      </p>
                    </div>
                  )}

                  <Button 
                    type="submit" 
                    className="w-full bg-blue-600 hover:bg-blue-700 text-lg py-6"
                    disabled={!isFormValid || isSubmitting}
                  >
                    {isSubmitting ? (
                      <div className="flex items-center space-x-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Processing...</span>
                      </div>
                    ) : (
                      `Subscribe & Pay ${formData.packageType ? packages.find(p => p.id === formData.packageType)?.price : ''}`
                    )}
                  </Button>

                  <p className="text-xs text-gray-500 text-center">
                    By subscribing, you agree to our terms of service. Cancel anytime.
                  </p>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Trust Indicators */}
        <div className="mt-20 text-center">
          <h3 className="text-2xl font-bold text-gray-900 mb-8">Why Realtors Choose Us</h3>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="flex flex-col items-center">
              <Users className="h-12 w-12 text-blue-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">1000+ Active Realtors</h4>
              <p className="text-gray-600">Trusted by real estate professionals nationwide</p>
            </div>
            <div className="flex flex-col items-center">
              <CheckCircle className="h-12 w-12 text-green-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">Verified Leads Only</h4>
              <p className="text-gray-600">Every lead is verified for accuracy and quality</p>
            </div>
            <div className="flex flex-col items-center">
              <TrendingUp className="h-12 w-12 text-purple-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">Proven Results</h4>
              <p className="text-gray-600">Average 15% conversion rate across all clients</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===============================================
FILE: app/page.tsx
===============================================
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, Users, MapPin, TrendingUp } from 'lucide-react';

const packages = [
  {
    id: '20-leads',
    name: '20 Leads',
    price: '$449',
    description: '20 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Email support']
  },
  {
    id: '50-leads',
    name: '50 Leads',
    price: '$699',
    description: '50 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Priority support'],
    popular: true
  },
  {
    id: '100-leads',
    name: '100 Leads',
    price: '$1,299',
    description: '100 high-quality leads per month',
    features: ['Verified contact information', '15-mile radius targeting', 'Monthly delivery', 'Dedicated support', 'Lead analytics']
  }
];

export default function Home() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    brokerage: '',
    zipCode: '',
    packageType: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await fetch('/api/create-checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const { url } = await response.json();
      window.location.href = url;
    } catch (error) {
      console.error('Error:', error);
      setIsSubmitting(false);
    }
  };

  const isFormValid = formData.name && formData.email && formData.phone && 
                     formData.brokerage && formData.zipCode && formData.packageType;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">RealEstate Leads Pro</h1>
            <Badge variant="secondary" className="bg-green-100 text-green-800">
              Trusted by 1000+ Realtors
            </Badge>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h2 className="text-5xl font-bold text-gray-900 mb-6">
            Get High-Quality Real Estate Leads
            <span className="text-blue-600"> Delivered Monthly</span>
          </h2>
          <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            Stop chasing leads. Start closing deals. Our verified leads are delivered directly to your inbox, 
            targeted to your specific zip code with a 15-mile radius.
          </p>
          
          <div className="flex justify-center space-x-8 mb-12">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <span className="text-gray-700">Verified Contact Info</span>
            </div>
            <div className="flex items-center space-x-2">
              <MapPin className="h-5 w-5 text-blue-500" />
              <span className="text-gray-700">15-Mile Targeting</span>
            </div>
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5 text-purple-500" />
              <span className="text-gray-700">Monthly Delivery</span>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-12 items-start">
          {/* Pricing Cards */}
          <div className="space-y-6">
            <h3 className="text-3xl font-bold text-gray-900 text-center mb-8">Choose Your Package</h3>
            <div className="space-y-4">
              {packages.map((pkg) => (
                <Card 
                  key={pkg.id} 
                  className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
                    formData.packageType === pkg.id 
                      ? 'ring-2 ring-blue-500 shadow-lg' 
                      : 'hover:shadow-md'
                  } ${pkg.popular ? 'border-blue-500' : ''}`}
                  onClick={() => handleInputChange('packageType', pkg.id)}
                >
                  <CardHeader className="pb-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-xl">{pkg.name}</CardTitle>
                        <CardDescription>{pkg.description}</CardDescription>
                      </div>
                      <div className="text-right">
                        <div className="text-3xl font-bold text-blue-600">{pkg.price}</div>
                        <div className="text-sm text-gray-500">per month</div>
                      </div>
                    </div>
                    {pkg.popular && (
                      <Badge className="w-fit bg-blue-600 hover:bg-blue-700">Most Popular</Badge>
                    )}
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {pkg.features.map((feature, index) => (
                        <li key={index} className="flex items-center space-x-2">
                          <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                          <span className="text-sm text-gray-600">{feature}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Sign Up Form */}
          <div className="lg:sticky lg:top-8">
            <Card className="shadow-xl">
              <CardHeader>
                <CardTitle className="text-2xl text-center">Start Getting Leads Today</CardTitle>
                <CardDescription className="text-center">
                  Fill out your information below to get started with your monthly lead subscription
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name *</Label>
                      <Input
                        id="name"
                        type="text"
                        value={formData.name}
                        onChange={(e) => handleInputChange('name', e.target.value)}
                        placeholder="John Smith"
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input
                        id="phone"
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => handleInputChange('phone', e.target.value)}
                        placeholder="(555) 123-4567"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address *</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      placeholder="john@example.com"
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="brokerage">Brokerage Information *</Label>
                    <Textarea
                      id="brokerage"
                      value={formData.brokerage}
                      onChange={(e) => handleInputChange('brokerage', e.target.value)}
                      placeholder="RE/MAX Premier, License #12345"
                      rows={3}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="zipCode">Target Zip Code *</Label>
                    <Input
                      id="zipCode"
                      type="text"
                      value={formData.zipCode}
                      onChange={(e) => handleInputChange('zipCode', e.target.value)}
                      placeholder="90210"
                      maxLength={5}
                      required
                    />
                    <p className="text-sm text-gray-500">
                      Leads will be targeted within a 15-mile radius of this zip code
                    </p>
                  </div>

                  {!formData.packageType && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <p className="text-sm text-yellow-800">
                        Please select a package above to continue
                      </p>
                    </div>
                  )}

                  <Button 
                    type="submit" 
                    className="w-full bg-blue-600 hover:bg-blue-700 text-lg py-6"
                    disabled={!isFormValid || isSubmitting}
                  >
                    {isSubmitting ? (
                      <div className="flex items-center space-x-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Processing...</span>
                      </div>
                    ) : (
                      `Subscribe & Pay ${formData.packageType ? packages.find(p => p.id === formData.packageType)?.price : ''}`
                    )}
                  </Button>

                  <p className="text-xs text-gray-500 text-center">
                    By subscribing, you agree to our terms of service. Cancel anytime.
                  </p>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Trust Indicators */}
        <div className="mt-20 text-center">
          <h3 className="text-2xl font-bold text-gray-900 mb-8">Why Realtors Choose Us</h3>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="flex flex-col items-center">
              <Users className="h-12 w-12 text-blue-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">1000+ Active Realtors</h4>
              <p className="text-gray-600">Trusted by real estate professionals nationwide</p>
            </div>
            <div className="flex flex-col items-center">
              <CheckCircle className="h-12 w-12 text-green-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">Verified Leads Only</h4>
              <p className="text-gray-600">Every lead is verified for accuracy and quality</p>
            </div>
            <div className="flex flex-col items-center">
              <TrendingUp className="h-12 w-12 text-purple-600 mb-4" />
              <h4 className="text-lg font-semibold mb-2">Proven Results</h4>
              <p className="text-gray-600">Average 15% conversion rate across all clients</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===============================================
FILE: app/api/create-checkout/route.ts
===============================================
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { storeLead } from '@/lib/db';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
});

const packagePrices = {
  '20-leads': 'price_1S7TqKBWNf0QYApPrBVAllYw123d5umd0o7Pf73WnIxLcCSNTFEFx0mXx6JAISJkESid5Ik8wm3GM5YjYIJqB0Jg00NtL7KbU5',
  '50-leads': 'price_1S7TqKBWNf0QYApPgGXan0143lsC8gHooZeiQHiWRUX0VhvXlTz0GVUdKJkLczUDNMN1lljQwU1b0h32sOrhwILJ005hMVLiwY',
  '100-leads': 'price_1S7TqKBWNf0QYApPwhsec_mc7NkS03gDfoL3sGpRQSnbRjBnYBX8HG'
};

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email, phone, brokerage, zipCode, packageType } = body;

    // Store lead in database
    await storeLead({
      name,
      email,
      phone,
      brokerage,
      zipCode,
      packageType,
      status: 'pending'
    });

    // Create Stripe customer
    const customer = await stripe.customers.create({
      email,
      name,
      metadata: {
        phone,
        brokerage,
        zipCode,
        packageType
      }
    });

    // Create checkout session
    const session = await stripe.checkout.sessions.create({
      customer: customer.id,
      payment_method_types: ['card'],
      line_items: [
        {
          price: packagePrices[packageType as keyof typeof packagePrices],
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/cancel`,
      metadata: {
        leadEmail: email,
        packageType
      }
    });

    return NextResponse.json({ url: session.url });
  } catch (error) {
    console.error('Error creating checkout session:', error);
    return NextResponse.json(
      { error: 'Failed to create checkout session' },
      { status: 500 }
    );
  }
}

===============================================
FILE: app/api/webhook/route.ts
===============================================
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { updateLeadStatus } from '@/lib/db';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
});

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(request: NextRequest) {
  const body = await request.text();
  const signature = request.headers.get('stripe-signature')!;

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err) {
    console.error('Webhook signature verification failed:', err);
    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed':
        const session = event.data.object as Stripe.Checkout.Session;
        
        if (session.metadata?.leadEmail) {
          await updateLeadStatus(session.metadata.leadEmail, 'active');
          console.log(`Lead activated: ${session.metadata.leadEmail}`);
        }
        break;

      case 'customer.subscription.deleted':
        const subscription = event.data.object as Stripe.Subscription;
        const customer = await stripe.customers.retrieve(subscription.customer as string);
        
        if (customer && !customer.deleted && customer.email) {
          await updateLeadStatus(customer.email, 'cancelled');
          console.log(`Subscription cancelled: ${customer.email}`);
        }
        break;

      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });
  } catch (error) {
    console.error('Webhook handler error:', error);
    return NextResponse.json(
      { error: 'Webhook handler failed' },
      { status: 500 }
    );
  }
}

===============================================
FILE: app/success/page.tsx
===============================================
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Mail, Calendar, Users } from 'lucide-react';
import Link from 'next/link';

export default function SuccessPage() {
  const searchParams = useSearchParams();
  const sessionId = searchParams.get('session_id');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate loading time for better UX
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Processing your subscription...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-6">
            <CheckCircle className="h-8 w-8 text-green-600" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Welcome to RealEstate Leads Pro!
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Your subscription is now active. Get ready to receive high-quality leads 
            delivered directly to your inbox every month.
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-8 mb-12">
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-blue-600" />
                <span>What Happens Next?</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-xs font-semibold text-blue-600">1</span>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">Lead Generation Begins</h4>
                  <p className="text-sm text-gray-600">We start generating leads in your target area within 24 hours</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-xs font-semibold text-blue-600">2</span>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">Monthly Delivery</h4>
                  <p className="text-sm text-gray-600">Leads are delivered on the same date each month</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-xs font-semibold text-blue-600">3</span>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">Start Converting</h4>
                  <p className="text-sm text-gray-600">Contact your leads and start closing more deals</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Mail className="h-5 w-5 text-green-600" />
                <span>Important Information</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h4 className="font-semibold text-green-800 mb-2">Confirmation Email Sent</h4>
                <p className="text-sm text-green-700">
                  Check your inbox for a confirmation email with your subscription details and next steps.
                </p>
              </div>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-800 mb-2">Customer Support</h4>
                <p className="text-sm text-blue-700">
                  Questions? Contact our support team at support@realestateleadspro.com
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="text-center">
          <h3 className="text-2xl font-bold text-gray-900 mb-6">Ready to Start Converting?</h3>
          <div className="grid md:grid-cols-3 gap-6 mb-8">
            <div className="text-center">
              <Users className="h-8 w-8 text-blue-600 mx-auto mb-2" />
              <h4 className="font-semibold text-gray-900">Quality Leads</h4>
              <p className="text-sm text-gray-600">Verified contact information</p>
            </div>
            <div className="text-center">
              <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
              <h4 className="font-semibold text-gray-900">Targeted Area</h4>
              <p className="text-sm text-gray-600">15-mile radius from your zip code</p>
            </div>
            <div className="text-center">
              <Calendar className="h-8 w-8 text-purple-600 mx-auto mb-2" />
              <h4 className="font-semibold text-gray-900">Monthly Delivery</h4>
              <p className="text-sm text-gray-600">Consistent lead flow</p>
            </div>
          </div>
          
          <Link href="/">
            <Button className="bg-blue-600 hover:bg-blue-700 text-lg px-8 py-3">
              Return to Homepage
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
}

===============================================
FILE: app/cancel/page.tsx
===============================================
'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { XCircle, ArrowLeft, Mail, Phone } from 'lucide-react';
import Link from 'next/link';

export default function CancelPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-6">
            <XCircle className="h-8 w-8 text-red-600" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Subscription Cancelled
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Your subscription was not completed. Don't worry - no charges were made to your account.
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-8 mb-12">
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="text-red-600">What Happened?</CardTitle>
              <CardDescription>
                Your payment was cancelled before completion
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-gray-600">
                This can happen for several reasons:
              </p>
              <ul className="list-disc list-inside space-y-2 text-sm text-gray-600">
                <li>You clicked the back button during checkout</li>
                <li>Payment method was declined</li>
                <li>You decided not to complete the purchase</li>
                <li>Browser or connection issues occurred</li>
              </ul>
            </CardContent>
          </Card>

          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="text-blue-600">Still Interested?</CardTitle>
              <CardDescription>
                We're here to help you get started
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-gray-600">
                If you're still interested in getting high-quality real estate leads:
              </p>
              <div className="space-y-3">
                <Link href="/">
                  <Button className="w-full bg-blue-600 hover:bg-blue-700">
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    Try Again
                  </Button>
                </Link>
                <div className="text-center text-sm text-gray-500">
                  or contact us for assistance
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card className="shadow-lg mb-8">
          <CardHeader>
            <CardTitle className="text-center">Need Help?</CardTitle>
            <CardDescription className="text-center">
              Our team is ready to assist you
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="text-center">
                <Mail className="h-8 w-8 text-blue-600 mx-auto mb-2" />
                <h4 className="font-semibold text-gray-900">Email Support</h4>
                <p className="text-sm text-gray-600 mb-2">Get help via email</p>
                <a 
                  href="mailto:support@realestateleadspro.com" 
                  className="text-blue-600 hover:text-blue-700 text-sm"
                >
                  support@realestateleadspro.com
                </a>
              </div>
              <div className="text-center">
                <Phone className="h-8 w-8 text-green-600 mx-auto mb-2" />
                <h4 className="font-semibold text-gray-900">Phone Support</h4>
                <p className="text-sm text-gray-600 mb-2">Speak with our team</p>
                <a 
                  href="tel:+1-555-123-4567" 
                  className="text-green-600 hover:text-green-700 text-sm"
                >
                  (555) 123-4567
                </a>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="text-center">
          <h3 className="text-2xl font-bold text-gray-900 mb-4">
            Why Choose RealEstate Leads Pro?
          </h3>
          <div className="grid md:grid-cols-3 gap-6 mb-8">
            <div className="text-center">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-blue-600 font-bold">1000+</span>
              </div>
              <h4 className="font-semibold text-gray-900">Active Realtors</h4>
              <p className="text-sm text-gray-600">Trusted nationwide</p>
            </div>
            <div className="text-center">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-green-600 font-bold">15%</span>
              </div>
              <h4 className="font-semibold text-gray-900">Conversion Rate</h4>
              <p className="text-sm text-gray-600">Average across clients</p>
            </div>
            <div className="text-center">
              <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-purple-600 font-bold">24/7</span>
              </div>
              <h4 className="font-semibold text-gray-900">Support</h4>
              <p className="text-sm text-gray-600">Always here to help</p>
            </div>
          </div>
          
          <Link href="/">
            <Button className="bg-blue-600 hover:bg-blue-700 text-lg px-8 py-3">
              Get Started Today
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
}

===============================================
FILE: lib/db.ts
===============================================
import { Pool } from 'pg';

const pool = new Pool({
  user: process.env.PGUSER,
  password: process.env.PGPASSWORD,
  host: process.env.PGHOST,
  port: parseInt(process.env.PGPORT || '5432'),
  database: process.env.PGDATABASE,
});

export interface Lead {
  id?: number;
  name: string;
  email: string;
  phone: string;
  brokerage: string;
  zipCode: string;
  packageType: string;
  status: 'pending' | 'active' | 'cancelled';
  createdAt?: Date;
  updatedAt?: Date;
}

// Initialize database tables
export async function initializeDatabase() {
  const client = await pool.connect();
  
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(50) NOT NULL,
        brokerage TEXT NOT NULL,
        zip_code VARCHAR(10) NOT NULL,
        package_type VARCHAR(50) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_leads_email ON leads(email);
      CREATE INDEX IF NOT EXISTS idx_leads_status ON leads(status);
      CREATE INDEX IF NOT EXISTS idx_leads_created_at ON leads(created_at);
    `);

    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Error initializing database:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Store a new lead
export async function storeLead(lead: Omit<Lead, 'id' | 'createdAt' | 'updatedAt'>) {
  const client = await pool.connect();
  
  try {
    // Initialize database if needed
    await initializeDatabase();
    
    const result = await client.query(
      `INSERT INTO leads (name, email, phone, brokerage, zip_code, package_type, status)
       VALUES ($1, $2, $3, $4, $5, $6, $7)
       ON CONFLICT (email) 
       DO UPDATE SET 
         name = EXCLUDED.name,
         phone = EXCLUDED.phone,
         brokerage = EXCLUDED.brokerage,
         zip_code = EXCLUDED.zip_code,
         package_type = EXCLUDED.package_type,
         status = EXCLUDED.status,
         updated_at = CURRENT_TIMESTAMP
       RETURNING *`,
      [lead.name, lead.email, lead.phone, lead.brokerage, lead.zipCode, lead.packageType, lead.status]
    );
    
    return result.rows[0];
  } catch (error) {
    console.error('Error storing lead:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Update lead status
export async function updateLeadStatus(email: string, status: Lead['status']) {
  const client = await pool.connect();
  
  try {
    const result = await client.query(
      `UPDATE leads 
       SET status = $1, updated_at = CURRENT_TIMESTAMP 
       WHERE email = $2 
       RETURNING *`,
      [status, email]
    );
    
    return result.rows[0];
  } catch (error) {
    console.error('Error updating lead status:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Get all leads
export async function getAllLeads() {
  const client = await pool.connect();
  
  try {
    const result = await client.query(
      'SELECT * FROM leads ORDER BY created_at DESC'
    );
    
    return result.rows;
  } catch (error) {
    console.error('Error fetching leads:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Get leads by status
export async function getLeadsByStatus(status: Lead['status']) {
  const client = await pool.connect();
  
  try {
    const result = await client.query(
      'SELECT * FROM leads WHERE status = $1 ORDER BY created_at DESC',
      [status]
    );
    
    return result.rows;
  } catch (error) {
    console.error('Error fetching leads by status:', error);
    throw error;
  } finally {
    client.release();
  }
}


===============================================
FILE: lib/stripe.ts
===============================================
import Stripe from 'stripe';

export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
});

export const getStripeJs = async () => {
  const { loadStripe } = await import('@stripe/stripe-js');
  return loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);
};

===============================================
FILE: lib/utils.ts
===============================================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

===============================================
FILE: app/layout.tsx
===============================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "RealEstate Leads Pro - High-Quality Real Estate Leads",
  description: "Get verified real estate leads delivered monthly. Choose from 20, 50, or 100 leads per month with 15-mile radius targeting.",
  keywords: "real estate leads, realtor leads, property leads, real estate marketing",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

===============================================
FILE: app/globals.css
===============================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

===============================================
FILE: tailwind.config.ts
===============================================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

===============================================
DEPLOYMENT INSTRUCTIONS
===============================================

## Quick Deployment Steps:

### 1. Create GitHub Repository
- Go to https://github.com/new
- Repository name: realtor-lead-generation
- Make it public
- Don't initialize with README (we have our own)

### 2. Upload Files
Copy each file above into your GitHub repository using the web interface:
- Click "creating a new file" 
- Copy the filename and content from each section above
- Commit each file

### 3. Deploy to Vercel
- Go to https://vercel.com
- Click "New Project"
- Import your GitHub repository
- Add these environment variables:
  * STRIPE_SECRET_KEY=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
  * STRIPE_PUBLISHABLE_KEY=pk_live_51S7TqKBWNf0QYApPrBVAllYw123d5umd0o7Pf73WnIxLcCSNTFEFx0mXx6JAISJkESid5Ik8wm3GM5YjYIJqB0Jg00NtL7KbU5
  * STRIPE_WEBHOOK_SECRET=whsec_mc7NkS03gDfoL3sGpRQSnbRjBnYBX8HG
  * NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_51S7TqKBWNf0QYApPrBVAllYw123d5umd0o7Pf73WnIxLcCSNTFEFx0mXx6JAISJkESid5Ik8wm3GM5YjYIJqB0Jg00NtL7KbU5
  * NEXT_PUBLIC_BASE_URL=https://your-vercel-domain.vercel.app

### 4. Set Up Database
- In Vercel dashboard, go to Storage tab
- Create new Postgres database
- Copy connection details to environment variables:
  * PGUSER, PGPASSWORD, PGHOST, PGPORT, PGDATABASE

### 5. Configure Stripe Webhook
- In Stripe dashboard, go to Webhooks
- Add endpoint: https://your-vercel-domain.vercel.app/api/webhook
- Select events: checkout.session.completed, customer.subscription.deleted

Your website will be live and ready to generate leads!

===============================================
COMPLETE PROJECT STRUCTURE
===============================================
realtor-lead-generation/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ create-checkout/
â”‚   â”‚   â”‚   â””â”€â”€ route.ts
â”‚   â”‚   â””â”€â”€ webhook/
â”‚   â”‚       â””â”€â”€ route.ts
â”‚   â”œâ”€â”€ success/
â”‚   â”‚   â””â”€â”€ page.tsx
â”‚   â”œâ”€â”€ cancel/
â”‚   â”‚   â””â”€â”€ page.tsx
â”‚   â”œâ”€â”€ globals.css
â”‚   â”œâ”€â”€ layout.tsx
â”‚   â””â”€â”€ page.tsx
â”œâ”€â”€ lib/
â”‚   â”œâ”€â”€ db.ts
â”‚   â”œâ”€â”€ stripe.ts
â”‚   â””â”€â”€ utils.ts
â”œâ”€â”€ components/
â”‚   â””â”€â”€ ui/
â”‚       â”œâ”€â”€ button.tsx
â”‚       â”œâ”€â”€ card.tsx
â”‚       â”œâ”€â”€ input.tsx
â”‚       â”œâ”€â”€ label.tsx
â”‚       â”œâ”€â”€ select.tsx
â”‚       â”œâ”€â”€ textarea.tsx
â”‚       â””â”€â”€ badge.tsx
â”œâ”€â”€ .env.example
â”œâ”€â”€ .gitignore
â”œâ”€â”€ README.md
â”œâ”€â”€ package.json
â”œâ”€â”€ next.config.ts
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ tailwind.config.ts
â””â”€â”€ components.json

===============================================
END OF FILE
===============================================

